<?xml version="1.0" encoding="ISO-8859-1"?>
<refentry version="5.0-subset Scilab" xml:id="PATask" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
>
    <info>
        <pubdate>$LastChangedDate: 2011-07-20 18:41:39 +0100 (mer., 20 july 2011)$</pubdate>
    </info>

    <refnamediv>
        <refname>PATask</refname>

        <refpurpose>Creates a complex Task which can be used in PAsolve</refpurpose>
    </refnamediv>

    <refsynopsisdiv>
        <title>Calling Sequence</title>

        <synopsis>PATask(lin, col)</synopsis>
    </refsynopsisdiv>

    <refsection>
        <title>Description</title>


        <para>The PATask object gives you more functionality when you call PAsolve than the basic function+parameters
            syntax. It allows you to:
        </para>
        <itemizedlist>
            <listitem>
                <para>chain executions of tasks, each task being dependant of the previous one inside the chain.
                </para>
            </listitem>
            <listitem>
                <para>define a function for each task (vs a global function definition)
                </para>
            </listitem>
            <listitem>
                <para>use custom source files which can contain the definition of library functions used by the main
                    one.
                </para>
            </listitem>
            <listitem>
                <para>add input and output files which will be transferred automatically to/from the workers.
                </para>
            </listitem>
            <listitem>
                <para>reuse the result of the previous task inside the chain as an input parameter of the current task.
                </para>
            </listitem>
        </itemizedlist>
        <para>PATask objects are in fact matrices. The number of columns of PATask matrices define how many parallel
            tasks will be executed by the scheduler when calling PAsolve. Inside each column, every line defines a task
            which will be executed only after the task defined on the previous line was successfully run (chain
            execution).
        </para>
        <para>For example, if we define a PATask matrix of 3 lines and 1 column (a vertical vector), the 3 tasks defined
            will be executed sequentially, one after the other. If we define a PATask matrix of 1 line and 4 columns
            (horizontal vector), the 4 tasks will be executed in parallel. Finally, if we define a 3x4 matrix (3 lines,
            4 columns), then 4 series of 3 sequential tasks will be executed in parallel.
        </para>
    </refsection>

    <refsection>
        <title>Parameters</title>
        <variablelist>
            <varlistentry>
                <term>lin</term>
                <listitem>
                    <para>
                        Number of lines of this PATask object
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>col</term>
                <listitem>
                    <para>
                        Number of columns of this PATask object
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>

    <refsection>
        <title>Attributes of the PATask object</title>
        <variablelist>
            <varlistentry>
                <term>Func</term>
                <listitem>
                    <para>
                        a string containing the name of the function used by this task
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Params</term>
                <listitem>
                    <para>
                        A list containing the parameters of the function Func for this task
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Description</term>
                <listitem>
                    <para>
                        A string describing this task textually.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Sources</term>
                <listitem>
                    <para>
                        A list containing the full path of the source files used by the function Func.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>InputFiles</term>
                <listitem>
                    <para>
                        the input files, given as a PAFiles array. Paths to the input files must be given relatively to
                        the current directory and it is not allowed to refer to a file which is outside the current directory hierarchy (i.e. no '..').
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>OutputFiles</term>
                <listitem>
                    <para>
                        the output files, given as a PAFiles array. Similarly the paths must be relative to the base directory
                        of the remote scilab engine (which will be a subdirectory of the TEMP directory).
                        The scilab function will have to create those files and all subdirectories relative to the base one.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>SelectionScript</term>
                <listitem>
                    <para>
                        A string containing the path to a Selection Script which can be used to select nodes, in
                        addition to the internal selection script which only selects machines which have been configured
                        for Scilab use (see<link linkend="Installation">Installation</link>). Refer to the Scheduler
                        manual for a detailed explanation on how to write selection scripts.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Static</term>
                <listitem>
                    <para>
                        A boolean value which tells if the task SelectionScript is a static script (%t) or a dynamic one (%f)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ScriptParams</term>
                <listitem>
                    <para>
                        a string containing the arguments of the SelectionScript, arguments should be separated by spaces.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Compose</term>
                <listitem>
                    <para>
                        A boolean which, if set to %t, tells that the first argument of the function Func will use the
                        output of the previous PATask in the chain (previous line in the same column). The other
                        parameters will be assigned by the "Params" list. For example, a function out=foo(a,b,c), called
                        with Compose=%t and Params=list(1,2) will be evaluated foo(out_i,1,2) where out_i is the result
                        of the previous PATask;
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>NbNodes</term>
                <listitem>
                    <para>an integer value which indicates the number of Scheduler Nodes necessary to run this task. This
                        parameter is interesting in case the Scilab engine is running in multithreaded mode to specify the number
                        of processors necessary or if an external program is called from the task, and this programs requires
                        multiple processors and/or machines.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Topology</term>
                <listitem>
                    <para>a string parameter which affects how nodes will be chosen to meet the NbNodes required. The values
                        possible are : 'arbitrary', 'bestProximity', 'thresholdProximity', 'singleHost', 'singleHostExclusive',
        'multipleHostsExclusive', 'differentHostsExclusive'. Please refer to ProActive Scheduler manual for more information on
        these values.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ThresholdProximity</term>
                <listitem>
                    <para>an integer value which indicates the threshold in case the 'thresholdProximity' is set on the Topology attribute. Please
        refer to ProActive Scheduler manual for more information on this setting.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>In case the topology parameters are used, the remote Scilab engines can access the url list of the Nodes
            used to run the task. This list can then be used to run parallel code on those machines. As multiple
            ProActive Nodes can be deployed on the same host, the list may contain several times an url with the same hostname. This
            list will be assigned to the variable NODE_URL_LIST in the workspace calling the Func function. So, in order to
            retrieve this list, you'll need to add the following code to your Scilab function:</para>
        <screen>
        nl = NODE_URL_LIST; // retrieves the NODE_URL_LIST variable from the caller workspace
        </screen>
        <para>
            The first element of this list is always the Node where the function Func is executed. The TestTopology function in the unit_tests folder provides an example
        of topology usage. </para>
    </refsection>

    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
-->t=PATask(2,3);

-->t(1:2,1:3).Func='cosh';

-->t(2,1:3).Compose=%t;

-->t(1,1).Params=list(1);

-->t(1,2).Params=list(2);

-->t(1,3).Params=list(3);

-->t
 t  =

(1,1):
Func: cosh
Params:

    1.
InputFiles: { }
OutputFiles: { }
Static: false
ThresholdProximity: 0
Compose: false

(2,1):
Func: cosh
Params:
InputFiles: { }
OutputFiles: { }
Static: false
ThresholdProximity: 0
Compose: true

(1,2):
Func: cosh
Params:

    2.
InputFiles: { }
OutputFiles: { }
Static: false
ThresholdProximity: 0
Compose: false

(2,2):
Func: cosh
Params:
InputFiles: { }
OutputFiles: { }
Static: false
ThresholdProximity: 0
Compose: true

(1,3):
Func: cosh
Params:

    3.
InputFiles: { }
OutputFiles: { }
Static: false
ThresholdProximity: 0
Compose: false

(2,3):
Func: cosh
Params:
InputFiles: { }
OutputFiles: { }
Static: false
ThresholdProximity: 0
Compose: true


-->r=PAsolve(t)

 Job submitted : 23
 r  =

(1):
Awaited (J:23)
(2):
Awaited (J:23)
(3):
Awaited (J:23)

-->r
 r  =

Job 23: Task 0_1


Job 23: Task 1_1


Job 23: Task 2_1


(1):

    2.446352
(2):

    21.533032
(3):

    11784.199

-->r2=cosh(cosh(1:3))
 r2  =

    2.446352    21.533032    11784.199
    ]]></programlisting>
    </refsection>

    <refsection>
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="PAsolve">PAsolve</link>
            </member>
        </simplelist>
    </refsection>

    <refsection>
        <title>Authors</title>

        <simplelist type="vert">
            <member>The ProActive Team, Fabien Viale</member>
        </simplelist>
    </refsection>
</refentry>

